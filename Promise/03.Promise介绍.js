//1, Promise是一个构造函数，既然是构造函数，那么，我们就可以 new Promise() 得到一个Promise的实例
//2, 在Promise上，有两个函数，分别叫做resolve（成功之后的回调函数）和 reject(失败之后的回调函数)
//3，在 Promise 构造函数的 Prototype属性上，有一个，then()方法，也就是说，只要是
//Promise构造函数创建的实例，都可以访问到.then()方法
//4，Promise 表示一个 异步操作；每当我们new 一个 Promise 的实例，这个实例，就表示
//一个具体的异步操作；
//5，既然Promise创建的实例，是一个异步操作，那么，这个异步操作的结果，只有两种状态：
//5.1 状态1:异步执行成功了，需要在内部调用 resolve把结果返回给调用者
//5.2 状态2: 异步执行失败了，需要在内部调用 reject 把结果返回给调用者
//5.3 由于Promise的实例，是一个异步操作，所以，内部拿到操作的结果后，无法使用return把操作的
//结果返回给调用者，这时候，只能使用回调函数的形式，来把成功或失败的结果，返回给调用者
//6，我们可以在new 出来的Promise实例上调用.then方法，【预先】为这个 Promise
//异步操作，指定成功resolve和失败reject回调函数